%{
	#include <stdio.h>
	int yylex();
    void yyerror(char *s);
%}
%token 
    LIB PROGRAMME VAR READ WRITE EXECUTE IF ELSE END_IF 
    WHILE COMP SIZE TYPE CONST IDF OP FORMAT_SIGN AT PIPE 
    SEP STRING CHAR OPENING_PARENTHESIS CLOSING_PARENTHESIS 
    OPENING_BRACKET CLOSING_BRACKET COMMENT END FLOAT 
    ASSIGN_OP ARTHE DOUBLE_PERIOD NUMBER DOUBLE_QUOTE QUOTE
    EQUAL LPOP HPOP
%%
CODE: 
    IMPORT PROGRAMME IDF OPENING_BRACKET DECLARATION_PART INSTRUCTION_PART CLOSING_BRACKET {
        printf("syntaxe correcte\n");
        YYACCEPT;
    }; 
IMPORT: 
    LIB IMPORT | ;
DECLARATION_PART: 
    VAR DECLARATION | ;
DECLARATION: 
    TYPE DOUBLE_PERIOD VAR_LIST DECLARATION | 
    CONST TYPE DOUBLE_PERIOD CONST_LIST DECLARATION| 
    END DECLARATION | END;
VAR_LIST: 
    IDF SEP VAR_LIST| //simple declaration with recurssion without assignement 
    IDF SIZE SEP VAR_LIST| // array declaration with recurssion
    IDF EQUAL ARITHMETIC_EXPRESSION SEP VAR_LIST| // simple int (or float) declaration with recurssion with assignement
    IDF EQUAL STRING SEP VAR_LIST| // simple string declaration with recurssion with assignement
    IDF EQUAL CHAR SEP VAR_LIST| // simple char declaration with recurssion with assignement
    IDF EQUAL ARITHMETIC_EXPRESSION| // simple int (or float) declaration without recurssion with assignement
    IDF EQUAL STRING| // simple string declaration without recurssion with assignement
    IDF EQUAL CHAR | //simple declaration without recurssion with char assignement
    IDF | //simple declaration without recurssion without assignement
    IDF SIZE /*array declaration without recurssion without assignement*/; 
CONST_LIST: 
    IDF EQUAL ARITHMETIC_EXPRESSION SEP CONST_LIST| 
    IDF EQUAL STRING SEP CONST_LIST|
    IDF EQUAL CHAR SEP CONST_LIST|
    IDF EQUAL STRING|
    IDF EQUAL CHAR| 
    IDF EQUAL ARITHMETIC_EXPRESSION;
ARITHMETIC_EXPRESSION: 
    /* LPOP : Low Priority OPerator*/ 
    OPENING_PARENTHESIS FLOAT LPOP ARITHMETIC_EXPRESSION CLOSING_PARENTHESIS|
    OPENING_PARENTHESIS NUMBER LPOP ARITHMETIC_EXPRESSION CLOSING_PARENTHESIS|
    OPENING_PARENTHESIS IDF LPOP ARITHMETIC_EXPRESSION CLOSING_PARENTHESIS|
    FLOAT LPOP ARITHMETIC_EXPRESSION|
    NUMBER LPOP ARITHMETIC_EXPRESSION|
    IDF LPOP ARITHMETIC_EXPRESSION|
    OPENING_PARENTHESIS FLOAT CLOSING_PARENTHESIS|
    OPENING_PARENTHESIS NUMBER CLOSING_PARENTHESIS|
    OPENING_PARENTHESIS IDF CLOSING_PARENTHESIS|
    LPOP OPENING_PARENTHESIS FLOAT CLOSING_PARENTHESIS|
    LPOP OPENING_PARENTHESIS NUMBER CLOSING_PARENTHESIS|
    LPOP OPENING_PARENTHESIS IDF CLOSING_PARENTHESIS|
    FLOAT|
    NUMBER|
    IDF|
    HP_ARITHMETIC_EXPRESSION;
/*High Priority ARITHMETIC_EXPRESSION*/
HP_ARITHMETIC_EXPRESSION:
    /*HPOP: High Priority OPerator*/
    OPENING_PARENTHESIS FLOAT HPOP ARITHMETIC_EXPRESSION CLOSING_PARENTHESIS|
    OPENING_PARENTHESIS NUMBER HPOP ARITHMETIC_EXPRESSION CLOSING_PARENTHESIS|
    OPENING_PARENTHESIS IDF HPOP ARITHMETIC_EXPRESSION CLOSING_PARENTHESIS|
    FLOAT HPOP ARITHMETIC_EXPRESSION|
    NUMBER HPOP ARITHMETIC_EXPRESSION|
    IDF HPOP ARITHMETIC_EXPRESSION;
LOGICAL_EXPRESSION: 
    //comparing an arithmetic expression and a string (ex: TestIdf + 78 * 7 SUP "test")
	OPENING_PARENTHESIS ARITHMETIC_EXPRESSION COMP STRING CLOSING_PARENTHESIS| 
	//comparing a string and an arithmetic expression (ex: "test" SUP TestIdf)
    OPENING_PARENTHESIS STRING COMP ARITHMETIC_EXPRESSION CLOSING_PARENTHESIS|
    //comparing an arithmetic expression and a char (ex: 7 SUP 'c')
    OPENING_PARENTHESIS ARITHMETIC_EXPRESSION COMP CHAR CLOSING_PARENTHESIS|
    //comparing a char and a arithmetic expression (ex:  'c' SUP TestIdf + 78 * 7  )
    OPENING_PARENTHESIS CHAR COMP ARITHMETIC_EXPRESSION CLOSING_PARENTHESIS|
    //comparing two arithmetic expression together(ex:  TestIdf2+ TestIdf - 872*(14+TestIdf3) SUP TestIdf + 78 * 7  )
    OPENING_PARENTHESIS ARITHMETIC_EXPRESSION COMP ARITHMETIC_EXPRESSION CLOSING_PARENTHESIS|	
    //comparing two strings together(ex:  "test" SUP "test4"  )
    OPENING_PARENTHESIS STRING COMP STRING CLOSING_PARENTHESIS|
    //comparing two chars together(ex:  't' SUP '6'  )
    OPENING_PARENTHESIS CHAR COMP CHAR CLOSING_PARENTHESIS|
    //comparing a char with a string (ex: "test" INF 'c')
    OPENING_PARENTHESIS STRING COMP CHAR CLOSING_PARENTHESIS|
    //comparing a char with a string (ex: "test" INF 'c')	
    OPENING_PARENTHESIS CHAR COMP STRING CLOSING_PARENTHESIS|
    // using the value of an arithmetic expression as a logical expression (ex: Eestqd - 852 *8 )	
    OPENING_PARENTHESIS ARITHMETIC_EXPRESSION CLOSING_PARENTHESIS|
    // using the value of an identifier as a logical expression
	IDF;
INSTRUCTION_PART: 
    ASSIGN INSTRUCTION_PART| 
    IO INSTRUCTION_PART | 
    LOOP INSTRUCTION_PART | 
    COND INSTRUCTION_PART | 
      ;
ASSIGN: IDF ASSIGN_OP ARITHMETIC_EXPRESSION END; 
IO: READ OPENING_PARENTHESIS FORMAT_SIGN PIPE AT IDF CLOSING_PARENTHESIS END|  
	WRITE OPENING_PARENTHESIS STRING PIPE REFERENCE CLOSING_PARENTHESIS END;
REFERENCE: IDF SEP REFERENCE | IDF; 

LOOP: 
    WHILE LOGICAL_EXPRESSION OPENING_BRACKET INSTRUCTION_PART CLOSING_BRACKET END;

COND: 
    EXECUTE INSTRUCTION_PART IF  LOGICAL_EXPRESSION ELSE EXECUTE INSTRUCTION_PART END_IF END|	
    EXECUTE INSTRUCTION_PART IF  LOGICAL_EXPRESSION END_IF END;
%%
void yyerror(char *s)
{ 
    printf("syntax error\n");
}
void main() {
	yyparse();
}
void yywarp(void){};