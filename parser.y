%{
	#include <stdio.h>
	int yylex();
    void yyerror(char *s);
%}
%token 
    LIB PROGRAMME VAR READ WRITE EXECUTE IF ELSE END_IF 
    WHILE COMP SIZE TYPE CONST IDF OP FORMAT_SIGN 
    SEP STRING OPENING_PARENTHESIS CLOSING_PARENTHESIS 
    OPENING_BRACKET CLOSING_BRACKET COMMENT END FLOAT 
    ASSIGN_OP ARTHE DOUBLE_PERIOD NUMBER CHAR DOUBLE_QUOTE QUOTE
    EQUAL LPOP HPOP
%%
CODE: 
    IMPORT PROGRAMME IDF OPENING_BRACKET DECLARATION_PART INSTRUCTION_PART CLOSING_BRACKET {
        printf("syntaxe correcte\n");
        YYACCEPT;
    }; 
IMPORT: 
    LIB IMPORT | ;
DECLARATION_PART: 
    VAR DECLARATION | ;
DECLARATION: 
    TYPE DOUBLE_PERIOD VAR_LIST DECLARATION | 
    CONST TYPE DOUBLE_PERIOD CONST_LIST DECLARATION| 
    END DECLARATION | END;
VAR_LIST: 
    IDF SEP VAR_LIST| //simple declaration with recurssion without assignement 
    IDF SIZE SEP VAR_LIST| // array declaration with recurssion
    IDF EQUAL ARITHMETIC_EXPRESSION SEP VAR_LIST| // simple int (or float) declaration with recurssion with assignement
    IDF EQUAL STRING SEP VAR_LIST| // simple string declaration with recurssion with assignement
    IDF EQUAL CHAR SEP VAR_LIST| // simple char declaration with recurssion with assignement
    IDF EQUAL ARITHMETIC_EXPRESSION| // simple int (or float) declaration without recurssion with assignement
    IDF EQUAL STRING| // simple string declaration without recurssion with assignement
    IDF EQUAL CHAR | //simple declaration without recurssion with char assignement
    IDF | //simple declaration without recurssion without assignement
    IDF SIZE /*array declaration without recurssion without assignement*/; 
CONST_LIST: 
    IDF EQUAL ARITHMETIC_EXPRESSION SEP CONST_LIST|
    IDF EQUAL STRING SEP CONST_LIST|
    IDF EQUAL CHAR SEP CONST_LIST|
    IDF EQUAL STRING|
    IDF EQUAL CHAR| 
    IDF EQUAL ARITHMETIC_EXPRESSION;
ARITHMETIC_EXPRESSION: 
    OPENING_PARENTHESIS FLOAT LPOP ARITHMETIC_EXPRESSION CLOSING_PARENTHESIS|
    OPENING_PARENTHESIS NUMBER LPOP ARITHMETIC_EXPRESSION CLOSING_PARENTHESIS|
    FLOAT LPOP ARITHMETIC_EXPRESSION|
    NUMBER LPOP ARITHMETIC_EXPRESSION|
    OPENING_PARENTHESIS FLOAT CLOSING_PARENTHESIS|
    OPENING_PARENTHESIS NUMBER CLOSING_PARENTHESIS|
    LPOP OPENING_PARENTHESIS FLOAT CLOSING_PARENTHESIS|
    LPOP OPENING_PARENTHESIS NUMBER CLOSING_PARENTHESIS|
    FLOAT|
    NUMBER|
    HP_ARITHMETIC_EXPRESSION;
HP_ARITHMETIC_EXPRESSION:
    OPENING_PARENTHESIS FLOAT HPOP ARITHMETIC_EXPRESSION CLOSING_PARENTHESIS|
    OPENING_PARENTHESIS NUMBER HPOP ARITHMETIC_EXPRESSION CLOSING_PARENTHESIS|
    FLOAT HPOP ARITHMETIC_EXPRESSION|
    NUMBER HPOP ARITHMETIC_EXPRESSION;
INSTRUCTION_PART: 
    ASSIGN | 
    IO | 
    LOOP | 
    COND | 
        ;
ASSIGN: IDF ASSIGN_OP ARITHMETIC_EXPRESSION; 
IO: READ  ;
LOOP: WHILE  ;
COND: IF  ;
%%
void yyerror(char *msg)
{ 
    printf("%s \n", msg);
}
void main() {
	yyparse();
}
void yywarp(void){};